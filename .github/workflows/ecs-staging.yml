name: Deploy Staging Service to ECS

on:
   push:
      branches: ['main']

env:
   AWS_REGION: us-east-1 # eu-west-3
   ECR_REPOSITORY: lexicon-api
   ECS_CLUSTER: OSFarmStaging

   LEXICON_SERVICE: lora2db-orange
   LEXICON_TASK_DEFINITION: .aws/lexicon-api-staging.json
   LEXICON_CONTAINER_NAME: lexicon-api-staging

permissions:
   contents: read

jobs:
   deploy:
      name: Deploy
      runs-on: ubuntu-latest
      environment: staging

      steps:
         - name: Checkout
           uses: actions/checkout@v3

         - name: Configure AWS credentials
           uses: aws-actions/configure-aws-credentials@v1
           with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

         - name: Login to Amazon ECR Public
           id: login-ecr-public
           uses: aws-actions/amazon-ecr-login@v2
           with:
             registry-type: public

         - name: Build, tag, and push image to Amazon ECR Public
           id: build-image
           env:
              ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
              IMAGE_TAG: ${{ github.sha }}
           run: |
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

         - name: Prepare Lexicon API task definition
           id: task-def-lexicon
           uses: aws-actions/amazon-ecs-render-task-definition@v1
           with:
              task-definition: ${{ env.LEXICON_TASK_DEFINITION }}
              container-name: ${{ env.LEXICON_CONTAINER_NAME }}
              image: ${{ steps.build-image.outputs.image }}

         - name: Deploy Lexicon task definition
           uses: aws-actions/amazon-ecs-deploy-task-definition@v1
           with:
              task-definition: ${{ steps.task-def-lexicon.outputs.task-definition }}
              service: ${{ env.LEXICON_SERVICE }}
              cluster: ${{ env.ECS_CLUSTER }}
              wait-for-service-stability: true

